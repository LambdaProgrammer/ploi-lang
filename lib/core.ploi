# Core procedures that are necessary for other libraries

### Useful variables
(define [null] [])
(define [true] 1)
(define [false] 0)

### Essential procedures

# Procedure to ease the creation of procedures
(define [proc] (lambda [name args body]
    [define (name) (lambda (args) body)]
  )
)

# b
(proc [unpack] [p l]
  [eval (join (List p) l)]
)

# b
(proc [pack] [p & l]
  [p l]
)

# Execute a sequence of expressions
(proc [do] [& seq]
  [if (== seq null)
    [null]
    [last seq]
  ]
)

# Open a new scope
(proc [let] [p]
 [((lambda [_] p) ())]
)

### Logical procedures

# Invert the outcome of x
(proc [not] [x]
  [if (== x 1)
    [0]
    [1]
  ]
)

# Check if both x and y are true
(proc [and] [x y]
  [== 2 (+ x y)]
)

# Check if x and/or y and true
(proc [or] [x y]
  [>= (+ x y) 1]
)

### Switch Statement

(proc [switch] [& cases]
  [if (== cases null)
    [raise "No cases input or evaluated to true."]
    [if (fst (fst cases))
      [snd (fst cases)]
      [unpack switch (tail cases)]
    ]
  ]
)

### List procedures

# Count the number of items in the list
(proc [length] [l]
  [if (== l null)
    [0]
    [+ 1 (length (tail l))]
  ]
)

# Get the last item of a list
(proc [last] [l]
  [nth (- (length l) 1) l]
)

# Get the nth item of the list
(proc [nth] [n l]
  [if (== n 0)
    [eval (head l)]
    [nth (- n 1) (tail l)]
  ]
)

## Quick procedures for the first three list items

# First item
(proc [fst] [l]
  [nth 0 l]
)

# Second item
(proc [snd] [l]
  [nth 1 l]
)

# Third item
(proc [trd] [l]
  [nth 2 l]
)
