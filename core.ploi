(define [null] [])
(define [true] 1)
(define [false] 0)

(define [proc] (lambda [name args body] # Procedure to ease the creation of procedures
    [define (name) (lambda (args) body)]
  )
)

(proc [abs] [x] # Find the absolute value of x
    [if (< x 0)
        [+ x (* 2 x)]
        [x]
    ]
)

(proc [all] [func lst] # Return true if func(lst) is always true
    [if (== lst null)
        [1]
        [if (func (eval (head lst)))
            [all func (tail lst)]
            [0]
        ]
    ]
)

(proc [and] [x y] # Both args are true
    [== 2 (+ x y)]
)

(proc [any] [func lst] # Return true if func(lst) is ever true
    [if (== lst null)
        [0]
        [if (func (eval (head lst)))
            [1]
            [any func (tail lst)]
        ]
    ]
)

(proc [drop] [num lst] # Remove the first num items from lst
    [if (== num 0)
        [lst]
        [drop (- num 1) (tail lst)]
    ]
)

(proc [elem] [item lst] # Return true if item is in lst
    [any (lambda [x] [== x item]) lst]
)

(proc [filter] [func lst] # Removes item from lst if func(lst) is false
    [if (== lst null)
        [null]
        [join (if (func (eval (head lst))) [head lst] [null]) (filter func (tail lst))]
    ]
)

(proc [flip] [func x y] # (Applied to a binary function) Returns func with x and y reversed
    [func y x]
)

(proc [foldl] [func base lst] # Fold left over lst, with operation func and base value base
    [if (== lst null)
        [base]
        [foldl func (func base (eval (head lst)) (tail lst))]
    ]
)
